
generator client {
  provider = "prisma-client-js"
  output   = "../packages/platform/prisma-client"
}

datasource db {
  provider = "sqlite"
  url      = "file:../.data/dev.db"
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  displayName  String
  passwordHash String
  isActive     Boolean       @default(true)
  failedLogins Int           @default(0)
  lockedUntil  DateTime?
  role         Role          @relation(fields: [roleId], references: [id])
  roleId       String
  sessions     UserSession[]
  tasks        UserTaskLog[]
  authEvents   AuthEvent[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
}

model Role {
  id       String  @id @default(cuid())
  name     String  @unique
  policies String
  users    User[]
}

model UserSession {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  deviceId  String
  tokenHash String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model UserTaskLog {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  action    String
  payload   String
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
  @@index([action, createdAt])
}

model AuthEvent {
  id          String    @id @default(cuid())
  outcome     String
  emailTried  String
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
  reason      String?
  createdAt   DateTime  @default(now())

  @@index([createdAt])
  @@index([emailTried, createdAt])
  @@index([userId, createdAt])
}

model Branch {
  id    String @id @default(cuid())
  code  String @unique
  name  String
  items Item[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Supplier {
  id        String   @id @default(cuid())
  name      String   @unique
  notes     String?
  items     Item[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Category {
  id        String   @id @default(cuid())
  code      String   @unique
  name      String   @unique
  items     Item[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Item {
  id              String    @id @default(cuid())
  itemCode        String    @unique
  title           String
  categoryId      String
  category        Category  @relation(fields: [categoryId], references: [id])
  branchId        String
  branch          Branch    @relation(fields: [branchId], references: [id])
  supplierId      String?
  supplier        Supplier? @relation(fields: [supplierId], references: [id])
  metal           String
  karat           String
  weight_g        Float?
  condition       String
  status          String    @default("AVAILABLE")
  cost            Float?
  costCode        String?
  typeSeq         Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt

  @@unique([branchId, categoryId, typeSeq])
}
